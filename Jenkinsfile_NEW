def reportOnAssetSizes() {
  sh 'script/ci/asset_sizes.rb > tmp/asset_sizes'
  archiveArtifacts allowEmptyArchive: true, artifacts: 'tmp/asset_sizes'
}

def reportRubocopOffenses() {
  sh 'bundle exec rubocop --fail-level fatal --format simple | tail -n1 | ruby -e "puts STDIN.read.match(/(\\d+) offenses/)[1]" > tmp/num_rubocop_offenses'
  archiveArtifacts allowEmptyArchive: true, artifacts: 'tmp/num_rubocop_offenses'
}

def runCommonSteps() {
  sh 'sudo /sbin/route add default gw 192.168.111.81'
  sh 'sudo /sbin/route add -net 172.16.0.0 netmask 255.240.0.0 gw 192.168.111.187'
  sh 'sudo /sbin/route add -net 192.168.121.0 netmask 255.255.255.0  gw 192.168.111.187'
  checkout scm
  sh 'script/ci/build_env.sh'
  sh 'mkdir -p vendor/cache'
  unstash 'bundle'
  sh 'bundle install --local --without development'
  sh 'rbenv rehash'
  unstash 'assets'
}

def runUnitSpecs(groupNum) {
  withEnv(['PATH+EXTRA=/home/admin/.rbenv/bin:/home/admin/.rbenv/shims:/home/admin/.rbenv/plugins/ruby-build/bin:/usr/local/sbin']) {
    runCommonSteps()
    sh "script/ci/run_unit_specs.sh --out tmp/rspec-${groupNum}.xml `./script/ci/unit_rspec_group.rb 2 ${groupNum}`"
    junit testResults: 'tmp/*.xml'
    stash name: "rcov_unit_${groupNum}", includes: "coverage/.resultset.json"
  }
}

def runFeatureSpecs(groupNum) {
  withEnv(['PATH+EXTRA=/home/admin/.rbenv/bin:/home/admin/.rbenv/shims:/home/admin/.rbenv/plugins/ruby-build/bin:/usr/local/sbin']) {
    runCommonSteps()
    sh "script/ci/run_feature_specs.sh --out tmp/features_rspec-${groupNum}.xml `./script/ci/feature_rspec_group.rb 2 ${groupNum}`"
    junit testResults: 'tmp/*.xml'
    stash name: "rcov_feature_${groupNum}", includes: "coverage/.resultset.json"
  }
}

pipeline {
  agent none
  environment {
    DB_USER = credentials('db-user')
    DB_PASS = credentials('db-pass')
  }
  stages {
    stage('Build and stash assets + gems') {
      agent {
        label 'jenkins-slave-permanent'
      }
      steps {
        sh 'script/ci/build_env.sh'
        withEnv(['PATH+EXTRA=/home/admin/.rbenv/bin:/home/admin/.rbenv/shims:/home/admin/.rbenv/plugins/ruby-build/bin:/usr/local/sbin']) {
          sh 'rm -rf vendor/cache'
          retry(7) {
            sh 'bundle install --deployment --without development'
          }
          sh 'bundle package > /dev/null'
          stash includes: 'vendor/cache/*', name: 'bundle'
          sh 'rm -rf app/assets/webpack'
          sh 'mkdir -p app/assets/webpack'
          sh 'npm install > /dev/null'
          sh 'npm run build:production > /dev/null'
          stash includes: 'app/assets/webpack/*', name: 'assets'
          sh 'mkdir -p tmp'
          // reportOnAssetSizes()
          // reportRubocopOffenses() -- this takes a long time, do we need it?
        }
      }
    }
    stage('Parallel Test Runs'){
      failFast true
      parallel {
        stage('Unit tests #1') {
          agent {
            label 'jenkins-slave-ondemand'
          }
          options {
            skipDefaultCheckout true
          }
          steps {
            runUnitSpecs(1)
          }
        }
        stage('Unit tests #2') {
          agent {
            label 'jenkins-slave-ondemand'
          }
          options {
            skipDefaultCheckout true
          }
          steps {
            runUnitSpecs(2)
          }
        }
        stage('Feature tests #1') {
          agent {
            label 'jenkins-slave-ondemand'
          }
          options {
            skipDefaultCheckout true
          }
          steps {
            runFeatureSpecs(1)
          }
        }
        stage('Feature tests #2') {
          agent {
            label 'jenkins-slave-ondemand'
          }
          options {
            skipDefaultCheckout true
          }
          steps {
            runFeatureSpecs(2)
          }
        }
      }
    }
    stage('Publish coverage report'){
      agent {
        label 'jenkins-slave-permanent'
      }
      steps {
        withEnv(['PATH+EXTRA=/home/admin/.rbenv/bin:/home/admin/.rbenv/shims:/home/admin/.rbenv/plugins/ruby-build/bin:/usr/local/sbin']) {
          sh 'rm -rf coverage'
          sh 'mkdir -p coverage/simplecov-resultset-{1,2,3,4}'
          dir("coverage/simplecov-resultset-1") {
            unstash "rcov_unit_1"
          }
          dir("coverage/simplecov-resultset-2") {
            unstash "rcov_unit_2"
          }
          dir("coverage/simplecov-resultset-3") {
            unstash "rcov_feature_1"
          }
          dir("coverage/simplecov-resultset-4") {
            unstash "rcov_feature_2"
          }
          sh "bundle exec ./script/ci/collate_rcov_files.rb"
          step([$class: 'RcovPublisher', reportDir: "coverage/rcov"])
        }
      }

    }
  }
  post {
    success {
      script {
        if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'nextrel') {
          slackSend (color: '#228B22', message: "SUCCESSFUL: Job '${env.JOB_NAME} [build #${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
      }
      emailext (
        subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", to: "asingh@greatschools.org",
        body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
          <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
    failure {
      script {
        if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'nextrel') {
          slackSend (color: '#B22222', message: "FAILED: Job '${env.JOB_NAME} [build #${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
      }
      emailext (
        subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", to: "asingh@greatschools.org",
        body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
          <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
    unstable {
      script {
        if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'nextrel') {
          slackSend (color: '#FFFF33', message: "UNSTABLE: Job '${env.JOB_NAME} [build #${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
      }
      emailext (
        subject: "UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", to: "asingh@greatschools.org",
        body: """<p>UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
          <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
  }
}